// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherTrackingApi.Data;

namespace WeatherTrackingApi.Migrations
{
    [DbContext(typeof(WeatherTrackingDbContext))]
    [Migration("20220705080230_FixWeatherStatus")]
    partial class FixWeatherStatus
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherTrackingApi.Models.Account", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailValidated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.BookingSchedule", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Velocity")
                        .HasColumnType("float");

                    b.HasKey("BookingId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BookingSchedules");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<byte>("TimeZone")
                        .HasColumnType("tinyint");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.FavoriteDestination", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("AverageTravelTimeInSec")
                        .HasColumnType("int");

                    b.Property<int>("TimeVisit")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CityId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FavoriteDestinations");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.SuggestBoard", b =>
                {
                    b.Property<int>("SuggestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("TimeZone")
                        .HasColumnType("tinyint");

                    b.HasKey("SuggestId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.ToTable("SuggestBoards");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.SuggestBoardImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SuggestId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("SuggestId");

                    b.ToTable("SuggestBoardImages");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.TransportHistory", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccurateTravelTimeInSec")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Velocity")
                        .HasColumnType("float");

                    b.HasKey("TransportId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TransportHistories");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.WeatherStatus", b =>
                {
                    b.Property<int>("WeatherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FavoriteDestinationCityId")
                        .HasColumnType("int");

                    b.Property<int?>("FavoriteDestinationUserId")
                        .HasColumnType("int");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.Property<float>("TemperatureInC")
                        .HasColumnType("real");

                    b.Property<int>("TimeEndInSec")
                        .HasColumnType("int");

                    b.Property<int>("TimeStartInSec")
                        .HasColumnType("int");

                    b.Property<float>("UvSunIndex")
                        .HasColumnType("real");

                    b.Property<string>("WeatherImage")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WeatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("WeatherId");

                    b.HasIndex("CityId")
                        .IsUnique();

                    b.HasIndex("FavoriteDestinationUserId", "FavoriteDestinationCityId");

                    b.ToTable("WeatherStatus");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.BookingSchedule", b =>
                {
                    b.HasOne("WeatherTrackingApi.Models.City", "City")
                        .WithOne("BookingSchedule")
                        .HasForeignKey("WeatherTrackingApi.Models.BookingSchedule", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherTrackingApi.Models.Account", "Account")
                        .WithOne("BookingSchedule")
                        .HasForeignKey("WeatherTrackingApi.Models.BookingSchedule", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.FavoriteDestination", b =>
                {
                    b.HasOne("WeatherTrackingApi.Models.City", "City")
                        .WithOne("FavoriteDestination")
                        .HasForeignKey("WeatherTrackingApi.Models.FavoriteDestination", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherTrackingApi.Models.Account", "Account")
                        .WithOne("FavoriteDestination")
                        .HasForeignKey("WeatherTrackingApi.Models.FavoriteDestination", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("City");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.SuggestBoard", b =>
                {
                    b.HasOne("WeatherTrackingApi.Models.City", "City")
                        .WithOne("SuggestBoard")
                        .HasForeignKey("WeatherTrackingApi.Models.SuggestBoard", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.SuggestBoardImage", b =>
                {
                    b.HasOne("WeatherTrackingApi.Models.SuggestBoard", "SuggestBoard")
                        .WithMany("SuggestBoardImages")
                        .HasForeignKey("SuggestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SuggestBoard");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.TransportHistory", b =>
                {
                    b.HasOne("WeatherTrackingApi.Models.Account", "Account")
                        .WithOne("TransportHistory")
                        .HasForeignKey("WeatherTrackingApi.Models.TransportHistory", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.WeatherStatus", b =>
                {
                    b.HasOne("WeatherTrackingApi.Models.City", "City")
                        .WithOne("WeatherStatus")
                        .HasForeignKey("WeatherTrackingApi.Models.WeatherStatus", "CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherTrackingApi.Models.FavoriteDestination", "FavoriteDestination")
                        .WithMany()
                        .HasForeignKey("FavoriteDestinationUserId", "FavoriteDestinationCityId");

                    b.Navigation("City");

                    b.Navigation("FavoriteDestination");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.Account", b =>
                {
                    b.Navigation("BookingSchedule");

                    b.Navigation("FavoriteDestination");

                    b.Navigation("TransportHistory");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.City", b =>
                {
                    b.Navigation("BookingSchedule");

                    b.Navigation("FavoriteDestination");

                    b.Navigation("SuggestBoard");

                    b.Navigation("WeatherStatus");
                });

            modelBuilder.Entity("WeatherTrackingApi.Models.SuggestBoard", b =>
                {
                    b.Navigation("SuggestBoardImages");
                });
#pragma warning restore 612, 618
        }
    }
}
